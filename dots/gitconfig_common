#
# The Creative Commons Attribution 4.0 International License (CC-BY)
#
# Copyright (c) 2015 Snakepit Software
# Author: Rodney C Forbes    <5n4k3@snakepitsoftware.com>
#
# This work is licensed under the Creative Commons Attribution
# 4.0 International License. To view a copy of this license,
# visit http://creativecommons.org/licenses/by/4.0/.
#

#
# This file needs to be included from the global .gitconfig - to use it,
# add a section at the bottom of your .gitconfig like ...
#
# [include]
#     path = /home/user/.gitconfig_common
#

[core]
    editor = vim
    whitespace = trailing-space,space-before-tab
    autocrlf=false

[advice]
    pushNonFastForward = false
    statusHints = false

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[push]
    default = simple

[log]
    decorate = short
    abbrevCommit = true

[format]
    #pretty.oneline =
    pretty = format:%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(cyan)<%ad>%Creset

[branch]
    autosetupmerge = true

[alias]
    # List aliases
    aliases          = config --global --includes --get-regexp '^alias\\.'

    # Abbreviations for some common misspellings
    remotes         = remote
    branches        = branch
    cherrypick      = cherry-pick
    alias           = !git aliases

    # Abbreviations for some common commands with common parameters
    co              = commit -asm
    fa              = fetch -v --all
    pf              = push --force
    rename-branch   = branch -m

    # Specialized diff output
    ds              = diff --staged
    dc              = diff --cached
    dw              = diff --word-diff=plain

    # Specialized log output
    log-audit       = log --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cd) %C(cyan)<%an>%Creset' --all --date=local --author "forbesr" --author "5n4k3" --after 2017-07-24 --until 2018-05-11
    log-g           = log --graph
    ll              = log --decorate=full --pretty=medium --no-abbrev-commit --date=relative
    ll-g            = log --decorate=full --pretty=medium --no-abbrev-commit --date=relative --graph
    showtagsbydate  = log --date-order --tags --simplify-by-decoration --pretty='format:%C(green)%ad %C(red)%h %C(reset)%D' --date=format:'%Y-%m-%d %H:%M:%S'

    #qpush     = "!git push origin \"$(git rev-parse --abbrev-ref HEAD)\""
    #qpull     = "!git pull origin \"$(git rev-parse --abbrev-ref HEAD)\""
    #pr = "!open \"$(git remote -v | grep origin | grep push | cut -f 2 | cut -d \" \" -f 1 | sed -e \"s|git@\\(.*\\):\\(.*\\).git|https://\\1/\\2|\")/pull/new/$(git rev-parse --abbrev-ref HEAD)\""
    #gh = "!open \"$(git remote -v | grep origin | grep push | cut -f 2 | cut -d \" \" -f 1 | sed -e \"s|git@\\(.*\\):\\(.*\\).git|https://\\1/\\2|\")/tree/$(git rev-parse --abbrev-ref HEAD)\""

    # amend history
    amend           = commit --amend -a
    # tag stuff
    tag             = "!f() { git-tag -a $1 -m "$1"; git push origin $1; }; f"
    untag           = "!f() { git tag -d $1; git push --delete origin $1; }; f"
    # Unstage any files that have been added to the staging area
    unstage         = reset HEAD
    # Un-add any files that were mistakenly added
    unadd           = reset
    # Un-remove any files that were mistakenly removed
    unremove        = checkout HEAD
    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish         = "!git push -u origin $(git branch-name)"
    # Delete the remote version of the current branch
    unpublish       = "!git push origin :$(git branch-name)"
    # Uncommit last commit
    uncommit        = "reset --soft HEAD~1"
    # Recommit last commit
    recommit        = "!f() { : ${LOG_MESSAGE:=\"`git log -1 --pretty=%s`\"} && [[ $# == 1 ]] && LOG_MESSAGE=\"$1\"; git reset --soft HEAD~1; git commit -asm \"$LOG_MESSAGE\"; }; f"

[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true

[merge]
    stat = true

[diff]
    #mnemonicprefix = true
    renames = copies

[difftool]
    prompt = false

[mergetool]
    prompt = false
    keepBackup = true


" TODO : go through this and make it work when full Vim isn't installed, i.e. fresh install of Ubuntu

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
    finish
endif

"
" General purpose settings
"

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" turn on visible bell
set vb

" set UTF-8 encoding
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8

set display=uhex,lastline
set shiftwidth=4 tabstop=4 expandtab
"set list  listchars=tab:»·,trail:·
set list  listchars=tab:>-,trail:-
set number

" don't create backups or swap files
set nobackup
set noswapfile

" switch syntax highlighting on, when the terminal has colors
" also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
endif

" allow mouse
"set mouse=a

" don't allow backspacing over everything in insert mode
"set backspace=
"indent,eol,start

set autoindent          " always set autoindenting on
set history=50          " keep 50 lines of command line history
set ruler               " show the cursor position all the time
set showcmd             " display incomplete commands
set incsearch           " do incremental searching
set ignorecase          " case insensitive search
set smartcase           " smartcase will do a case sensitive search if using caps
"if exists('&colorcolumn')
"    let &colorcolumn="80,".join(range(120,999),",")
"    highlight colorcolumn ctermbg=7
"endif

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
let &guioptions = substitute(&guioptions, "t", "", "g")

:set cpoptions+=$

"
" Mappings
"

" backslash is kinda awkward to hit
:let mapleader = ","

" alternate tab switching (gt/gT)
nnoremap <C-Right> :tabnext<CR>
nnoremap <C-Left> :tabprevious<CR>

" Don't use Ex mode, use Q for formatting
map Q gq

" Make p in Visual mode replace the selected text with the "" register.
vnoremap p <Esc>:let current_reg = @"<CR>gvs<C-R>=current_reg<CR><Esc>

" Fix the messed up <BS> and <DEL>
"inoremap  
"set t_kb=
"set t_kD=

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

" Configure Folds
set nofoldenable
set foldmethod=syntax
set foldlevel=99
"set foldlevelstart=10
"set foldnestmax=10
" space open/closes folds
nnoremap <space> za

augroup searchtasks
    nnoremap <F9> :vimgrep /\\CXXX \\|FIXME \\|TODO \\|RCF /j %<CR>
    nnoremap <F10> :vimgrep /\\CXXX \\|FIXME \\|TODO \\|RCF /j **/*<CR>
    nnoremap <leader>t :vimgrep /\\CXXX \\|FIXME \\|TODO \\|RCF /j %<CR>
    nnoremap <leader>ta :vimgrep /\\CXXX \\|FIXME \\|TODO \\|RCF /j **/*<CR>

    " conditionally auto open the quickfix/location window
    autocmd!
    autocmd QuickFixCmdPost [^l]* nested cwindow
    autocmd QuickFixCmdPost l*    nested lwindow

    " don't switch away from quickfix window when match is selected
    "autocmd FileType qf nnoremap <buffer> <CR> <CR><C-W>p
    " switch away from quickfix window when match is selected
    autocmd FileType qf nnoremap <buffer> <CR> <CR>:cclose<CR>
augroup END

" Strip trailing whitespace
function! StripTrailingWhitespace()
    " Only strip if the b:noStripeWhitespace variable isn't set
    if exists('b:noStripWhitespace')
        return
    endif
    %s/\s\+$//e
endfun

if !exists(':STW')
    :command STW call StripTrailingWhitespace()
endif

"
" Autocmd stuff
"

" Only do this part when compiled with support for autocommands.
if has("autocmd")
    " Enable file type detection.
    " Use the default filetype settings, so that mail gets 'tw' set to 72,
    " 'cindent' is on in C files, etc.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype plugin indent on

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

    " Can't do this on every file, because there is an intentional trailing
    " space in this file
    "autocmd BufWritePre * %s/\s\+$//e
    autocmd BufWritePre * call StripTrailingWhitespace()
    autocmd FileType vim,vimwiki let b:noStripWhitespace=1

    autocmd FileType make setlocal noexpandtab nowrap
    autocmd FileType c setlocal shiftwidth=4 tabstop=4 expandtab nowrap
    autocmd FileType cpp setlocal shiftwidth=4 tabstop=4 expandtab nowrap
    autocmd FileType java setlocal shiftwidth=4 tabstop=4 expandtab nowrap
    autocmd FileType sh setlocal shiftwidth=2 tabstop=2 expandtab nowrap

    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text setlocal textwidth=78

endif " has("autocmd")

"
" Netrw stuff
"

" RCF - would like a way to auto close on select
let g:NetrwIsOpen=0

function! ToggleNetrw()
    if g:NetrwIsOpen
        let i = bufnr("$")
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                silent exe "bwipeout " . i 
            endif
            let i-=1
        endwhile
        let g:NetrwIsOpen=0
    else
        let g:NetrwIsOpen=1
        silent Lexplore
    endif
endfunction
nnoremap <silent> <F7> :call ToggleNetrw()<CR>
let g:netrw_banner = 0
let g:netrw_liststyle = 2
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
augroup ProjectDrawer
    autocmd!
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | :call ToggleNetrw() | endif
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | :ene | :call ToggleNetrw() | endif
augroup END

"
" Clipboard stuff
"

if !exists("g:os")
    if has("win64") || has("win32") || has("win16")
        let g:os = "Windows"
    else
        let g:os = substitute(system('uname'), '\n', '', '')
    endif
endif

if has('clipboard')
    if g:os == "Darwin"
        set clipboard=unnamed
    elseif g:os == "Linux"
        if has('unnamedplus')
            set clipboard=unnamedplus
        else
            set clipboard=unnamed
        endif
    elseif g:os == "Windows"
        set clipboard=unnamed
    endif
endif

"
" Status line stuff
"

set laststatus=2

set statusline=\ %f
set statusline+=\ \[%n\]%r%m
set statusline+=%=
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %l/%L:%c
" The trailing space is important
set statusline+=\ 

"
" VimPlug stuff
"

" Install vim-plug if it is not installed
if empty(glob('~/.vim/autoload/plug.vim'))
          silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
              \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
            autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins to be installed
call plug#begin('~/.vim/plugged')

Plug 'vimwiki/vimwiki'
Plug 'chazy/dirsettings'
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'
Plug 'ajh17/VimCompletesMe'
Plug 'majutsushi/tagbar'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
Plug 'simeji/winresizer'
"Plug 'suan/vim-instant-markdown'

"Plug 'tpope/vim-vinegar'
"Plug 'scrooloose/nerdtree'
"Plug 'jeetsukumaran/vim-buffergator'
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"Plug 'junegunn/fzf.vim'

" Themes to be installed
"Plug 'gkjgh/cobalt'
Plug 'vim-scripts/dante.vim'
"Plug 'vim-scripts/Gothic'
"Plug 'vim-scripts/seashell'
"Plug 'vim-scripts/BlackSea'

call plug#end()

"
" Plugin specific settings
"

" -- VimWiki
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.wiki'}]

au BufEnter *.wiki :syntax sync fromstart

" >>, <<  - indents/outdents single line
:nmap >> <Plug>VimwikiIncreaseLvlSingleItem
:vmap >> <Plug>VimwikiIncreaseLvlSingleItem
:nmap << <Plug>VimwikiDecreaseLvlSingleItem
:vmap << <Plug>VimwikiDecreaseLvlSingleItem
" >>>, << - indents/outdents whole item
:nmap >>> <Plug>VimwikiIncreaseLvlWholeItem
:vmap >>> <Plug>VimwikiIncreaseLvlWholeItem
:nmap <<< <Plug>VimwikiDecreaseLvlWholeItem
:vmap <<< <Plug>VimwikiDecreaseLvlWholeItem
" tt, rr, ++, --  - toggles completed/not started, rejects/unrejects, increments/decrements completeness (. o O X) of a list item
:nmap tt <Plug>VimwikiToggleListItem
:vmap tt <Plug>VimwikiToggleListItem
:nmap rr <Plug>VimwikiToggleRejectedListItem
:vmap rr <Plug>VimwikiToggleRejectedListItem
:nmap ++ <Plug>VimwikiIncrementListItem
:vmap ++ <Plug>VimwikiIncrementListItem
:nmap -- <Plug>VimwikiDecrementListItem
:vmap -- <Plug>VimwikiDecrementListItem
" Playing around with changing the way you follow links and go back
":nmap <Leader>wf <Plug>VimwikiFollowLink
":nmap <Leader>wb <Plug>VimwikiGoBackLink

" -- vim-gutentags
let g:gutentags_modules = [ 'ctags', 'gtags_cscope' ]
" config project root markers
let g:gutentags_project_root = [ '.root' ]
let g:gutentags_add_default_project_root = 1
" where to store tag files
let g:gutentags_cache_dir = '~/.vim/tags'
" exclude certain files to keep things cleaner
let g:gutentags_ctags_exclude = ['Makefile', '*.pro', '*.pri',
                               \ '*.css', '*.html', '*.js', '*.json', '*.xml',
                               \ '*.ini', '*.md']
nnoremap <leader>[ <C-t>
nnoremap <leader>] <C-]>

" -- gutentags_plus
" change focus to quickfix window after search
let g:gutentags_plus_switch = 1

" -- VimCompletesMe
" no custom settings yet

" -- NerdTree
"Toggle NERDtree to Ctrl+N
"nmap <C-N> :NERDTreeToggle<CR>
"let NERDTreeMinimalUI = 1
"let NERDTreeDirArrows = 1
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | wincmd p | endif
"autocmd FileType nerdtree nnoremap <buffer> <CR> <CR>:close<CR>

" -- TagBar
" Map the tagbar to F8
nnoremap <silent> <F8> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1
let g:tagbar_showvisibility = 1
let g:tagbar_iconchars = ['+', '-']

" -- vim-instant-markdown
"let g:instant_markdown_slow = 1

"
" Theme stuff
"

" Change the ugly default colorscheme to something more pleasing to the eye
try
    "colo cobalt
    colo dante
    "colo gothic
    "colo seashell
    "colo BlackSea
catch
    :silent! colo default
endtry


" TODO : go through this and make it work when full Vim isn't installed, i.e. fresh install of Ubuntu

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
    finish
endif

"
" General purpose settings
"

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" turn on visible bell
set vb

" set UTF-8 encoding
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8

set display=uhex,lastline
set shiftwidth=4 tabstop=4 expandtab
set list
"set listchars=tab:»·,trail:·
set listchars=tab:>-,trail:-,extends:#,nbsp:.
set number

" don't create backups or swap files
set nobackup
set noswapfile

set pastetoggle=<F2>

" switch syntax highlighting on, when the terminal has colors
" also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
"    set t_Co=256
"    set t_AB=^[[48;5;%dm
"    set t_AF=^[[38;5;%dm
endif

" allow mouse
"set mouse=a

" don't allow backspacing over everything in insert mode
"set backspace=
"indent,eol,start

set autoindent          " always set autoindenting on
set history=50          " keep 50 lines of command line history
set ruler               " show the cursor position all the time
set showcmd             " display incomplete commands
set incsearch           " do incremental searching
set showmatch           " show matching paren/brace/bracket
set ignorecase          " case insensitive search
set smartcase           " smartcase will do a case sensitive search if using caps
"if exists('&colorcolumn')
"    let &colorcolumn="80,".join(range(120,999),",")
"    highlight colorcolumn ctermbg=7
"endif

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
let &guioptions = substitute(&guioptions, "t", "", "g")

set cpoptions+=$

set wildmenu

"hide buffers instead of closing them. This means that you can have unwritten changes
"to a file and open a new file using :e, without being forced to write or undo your
"changes first. Also, undo buffers and marks are preserved while the buffer is open.
set hidden

set report=0

"
" Mappings
"

" \ is kinda awkward to hit
let mapleader = ","

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" allows cursor change in tmux mode - this is very terminal dependent, might have
" to play around with this
"if exists('$TMUX')
"    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
"    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
"else
"    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
"endif

" alternate tab switching (gt/gT)
nnoremap <C-Right> :tabnext<CR>
nnoremap <C-Left> :tabprevious<CR>

" Don't use Ex mode, use Q for formatting
noremap Q gq

" Fix the messed up <BS> and <DEL>
"inoremap  
"set t_kb=
"set t_kD=

" Make p in Visual mode replace the selected text with the "" register.
"vnoremap p <Esc>:let current_reg = @"<CR>gvs<C-R>=current_reg<CR><Esc>

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

cmap w!! w !sudo tee % >/dev/null

" Configure Folds
set nofoldenable
set foldmethod=syntax
set foldlevel=99
"set foldlevelstart=10
"set foldnestmax=10
" space open/closes folds
nnoremap <space> za

" Quickly edit/reload this configuration file
nnoremap gev :e $MYVIMRC<CR>
nnoremap gsv :so $MYVIMRC<CR>

" Strip trailing whitespace
function! StripTrailingWhitespace()
    " Only strip if the b:noStripWhitespace variable isn't set
    if !exists('b:noStripWhitespace')
        %s/\s\+$//e
    endif
endfun

function! ToggleSTW()
    if exists('b:noStripWhitespace')
        :unlet b:noStripWhitespace
    else
        let b:noStripWhitespace=1
    endif
endfun

function! ToggleGutter()
    if exists('b:noGutter')
        set signcolumn=auto
        set number
        :unlet b:noGutter
        :echo ""
    else
        set signcolumn=no
        set nonumber
        let b:noGutter=1
        :echo "-- Copy Mode --"
    endif
endfun

nnoremap <silent> <F3> :call ToggleGutter()<CR>
nnoremap <silent> <F4> :call ToggleSTW()<CR>

"
" Autocmd stuff
"

if has('autocmd') " Only do this part when compiled with support for autocommands.
    augroup vimrc     " Source vim configuration upon save
        autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
        autocmd! BufWritePost $MYGVIMRC if has('gui_running') | so % | echom "Reloaded " . $MYGVIMRC | endif | redraw
    augroup END
endif " has("autocmd")

" Search for code tags like XXX, FIXME, TODO, BUG, NOTE, RCF
if has('autocmd') " Only do this part when compiled with support for autocommands.
    augroup codetags
        let codetags = [ 'XXX', 'FIXME', 'TODO', 'BUG', 'NOTE', 'RCF' ]
        "nnoremap <expr> <F9>       ':vimgrep /\C ' . join(codetags, ' \\| ') . ' /j %<CR>'
        "nnoremap <expr> <F10>      ':vimgrep /\C ' . join(codetags, ' \\| ') . ' /j **/*<CR>'
        nnoremap <expr> <leader>t  ':vimgrep /\C ' . join(codetags, ' \\| ') . ' /j %<CR>'
        nnoremap <expr> <leader>ta ':vimgrep /\C ' . join(codetags, ' \\| ') . ' /j **/*<CR>'

        " conditionally auto open the quickfix/location window
        autocmd!
        autocmd QuickFixCmdPost [^l]* nested cwindow
        autocmd QuickFixCmdPost l*    nested lwindow

        " don't switch away from quickfix window when match is selected
        "autocmd FileType qf nnoremap <buffer> <CR> <CR><C-W>p
        " switch away from quickfix window when match is selected
        autocmd FileType qf nnoremap <buffer> <CR> <CR>:cclose<CR>
        " use q to close window if you don't want to select anything
        autocmd FileType qf nnoremap <buffer> q :cclose<CR>
    augroup END
endif " has("autocmd")

if has("autocmd") " Only do this part when compiled with support for autocommands.
    " Enable file type detection.
    " Use the default filetype settings, so that mail gets 'tw' set to 72,
    " 'cindent' is on in C files, etc.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype plugin indent on

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

    autocmd FocusGained,BufEnter * :checktime

    " Can't do this on every file, because there might be an intentional
    " trailing space in certain filetypes like this file
    "autocmd BufWritePre * %s/\s\+$//e
    autocmd BufWritePre * call StripTrailingWhitespace()
    autocmd FileType vim,vimwiki let b:noStripWhitespace=1

    autocmd FileType make setlocal noexpandtab nowrap
    autocmd FileType c setlocal shiftwidth=4 tabstop=4 expandtab nowrap
    autocmd FileType cpp setlocal shiftwidth=4 tabstop=4 expandtab nowrap
    autocmd FileType java setlocal shiftwidth=4 tabstop=4 expandtab nowrap
    autocmd FileType sh setlocal shiftwidth=2 tabstop=2 expandtab nowrap

    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text setlocal textwidth=78
endif " has("autocmd")

"
" Netrw stuff
"

" RCF - would like a way to auto close on select
" RCF - would be nice to be able to allow the netrw window on every tab
"       it appears that netrw uses the same buffer in all windows
" RCF - maybe integrate netrw_list_hide with wildignore
"let t:NetrwIsOpen=0
let g:NetrwIsOpen=0

function! ToggleNetrw()
    if exists("g:NetrwIsOpen") && g:NetrwIsOpen
        let i = bufnr("$")
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                "let j = bufwinid(i)
                "if (len(getwininfo(j)) != 0)
                "    echo getwininfo(j)
                    silent exe "bwipeout " . i
                "endif
            endif
            let i-=1
        endwhile
        let g:NetrwIsOpen=0
    else
        let g:NetrwIsOpen=1
        silent Vexplore
    endif
endfunction
nnoremap <silent> <F7> :call ToggleNetrw()<CR>
let g:netrw_banner = 0
" Actually want liststyle to be 3 for a tree look, but there's a bug with
" regard to symbolic links
let g:netrw_liststyle = 0
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
"let wildignore = '^\./$'
"let g:netrw_list_hide = @wildignore
let g:netrw_list_hide = '^\./$'
let g:netrw_hide = 1
autocmd FileType netrw nnoremap <buffer> q :call ToggleNetrw()<CR>
augroup ProjectDrawer
    autocmd!
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | :call ToggleNetrw() | endif
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | :ene | :call ToggleNetrw() | endif
augroup END

"
" OS detection stuff
"
"
if !exists("g:os")
    if has("win64") || has("win32") || has("win16")
        let g:os = "Windows"
    else
        let g:os = substitute(system('uname'), '\n', '', '')
    endif
endif

"
" Clipboard stuff
"

if has('clipboard')
    set clipboard=unnamed

    if has('unnamedplus')
        set clipboard=unnamedplus
    endif
endif

"
" VimPlug stuff
"

" Install vim-plug if it is not installed
if empty(glob('~/.vim/autoload/plug.vim'))
          silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
              \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
            autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins to be installed
call plug#begin('~/.vim/plugged')

"Plug 'tpope/vim-sensible'
Plug 'vimwiki/vimwiki'
Plug 'chazy/dirsettings'
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'
Plug 'ajh17/VimCompletesMe'
Plug 'majutsushi/tagbar'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
Plug 'simeji/winresizer'
Plug 'junegunn/vim-peekaboo'
Plug 'tmux-plugins/vim-tmux-focus-events'
"Plug 'Yilin-Yang/vim-markbar'
"Plug 'suan/vim-instant-markdown'

"Plug 'tpope/vim-vinegar'
"Plug 'jeetsukumaran/vim-buffergator'
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"Plug 'junegunn/fzf.vim'

" Themes to be installed
"Plug 'gkjgh/cobalt'
Plug 'vim-scripts/dante.vim'
"Plug 'vim-scripts/Gothic'
"Plug 'vim-scripts/seashell'
"Plug 'vim-scripts/BlackSea'
"Plug 'dracula/vim', { 'as': 'dracula' }

call plug#end()

"
" Plugin specific settings
"

" -- VimWiki

"
" To configure the vimwiki to be automagically backed up using git, ...
"
" Run these commands to initialize and populate the git repo
" $ git init
" $ git remote add origin stash:~forbesr/vimwiki
" $ git add .
" $ git commit -sm "initial import"
" $ git push -u origin master
"
" Create a file named .vimdir containing these lines
" :cd %:p:h
" silent! !git pull > /dev/null
" :e!
" autocmd! BufWritePost <buffer> silent! execute "!git add .;git commit -m \"vim autocommit\";git push" | redraw!
"

let wiki_1 = {}
let wiki_1.path = '~/vimwiki/'
let wiki_1.syntax = 'markdown'
let wiki_1.ext = '.md'

let g:vimwiki_list = [wiki_1]
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}

au BufEnter *.wiki :syntax sync fromstart

" >>, <<  - indents/outdents single line
nmap >> <Plug>VimwikiIncreaseLvlSingleItem
vmap >> <Plug>VimwikiIncreaseLvlSingleItem
nmap << <Plug>VimwikiDecreaseLvlSingleItem
vmap << <Plug>VimwikiDecreaseLvlSingleItem
" >>>, << - indents/outdents whole item
nmap >>> <Plug>VimwikiIncreaseLvlWholeItem
vmap >>> <Plug>VimwikiIncreaseLvlWholeItem
nmap <<< <Plug>VimwikiDecreaseLvlWholeItem
vmap <<< <Plug>VimwikiDecreaseLvlWholeItem
" tt, rr, ++, --  - toggles completed/not started, rejects/unrejects, increments/decrements completeness (. o O X) of a list item
nmap tt <Plug>VimwikiToggleListItem
vmap tt <Plug>VimwikiToggleListItem
nmap rr <Plug>VimwikiToggleRejectedListItem
vmap rr <Plug>VimwikiToggleRejectedListItem
nmap ++ <Plug>VimwikiIncrementListItem
vmap ++ <Plug>VimwikiIncrementListItem
nmap -- <Plug>VimwikiDecrementListItem
vmap -- <Plug>VimwikiDecrementListItem
" Playing around with changing the way you follow links and go back
"nmap <leader>wf <Plug>VimwikiFollowLink
"nmap <leader>wb <Plug>VimwikiGoBackLink

" -- vim-gutentags
set tags=./.tags;,.tags
let g:gutentags_modules = [ 'ctags', 'gtags_cscope' ]
" config project root markers
let g:gutentags_project_root = [ '.root' ]
let g:gutentags_add_default_project_root = 1
" where to store tag files
let s:vim_tags = expand('~/.vim/tags')
let g:gutentags_cache_dir = s:vim_tags
let g:gutentags_ctags_auto_set_tags = 1
" exclude certain files to keep things cleaner
let g:gutentags_ctags_exclude = [ 'Makefile', '*.pro', '*.pri',
                                \ '*.css', '*.html', '*.js', '*.json', '*.xml',
                                \ '*.ini', '*.md', 'moc_*.cpp', 'moc_*.h',
                                \ '~/vimwiki/', '~/.vim/', '~/.tmux/' ]

nnoremap <leader>[ <C-t>
nnoremap <leader>] <C-]>

if !isdirectory(s:vim_tags)
    silent! call mkdir(s:vim_tags, 'p')
endif

" -- gutentags_plus
" change focus to quickfix window after search
let g:gutentags_plus_switch = 1

" -- VimCompletesMe
" no custom settings yet

" -- TagBar
" Map the tagbar to F8
nnoremap <silent> <F8> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1
let g:tagbar_showvisibility = 1
let g:tagbar_iconchars = ['+', '-']

" -- vim-gitgutter
set updatetime=100
let g:gitgutter_git_executable = '/usr/bin/git'

" -- vim-instant-markdown
"let g:instant_markdown_slow = 1

" -- vim-markbar
nmap <leader>m <Plug>ToggleMarkbar

" the following are unneeded if ToggleMarkbar is mapped
nmap <leader>mo <Plug>OpenMarkbar
nmap <leader>mc <Plug>CloseMarkbar

"
" Theme stuff
"

" Change the ugly default colorscheme to something more pleasing to the eye
try
    "colo cobalt
    colo dante
    "colo gothic
    "colo seashell
    "colo BlackSea
    "colo dracula
catch
    silent! colo default
endtry

"
" Status line stuff (must go after the colorscheme stuff)
"

"hi x236_Grey19 ctermfg=236 guifg=#303030 "rgb=48,48,48
hi StatusLine       ctermbg=cyan   ctermfg=236 guibg=cyan   guifg=#303030
hi StatusLineTerm   ctermbg=cyan   ctermfg=236 guibg=cyan   guifg=#303030
hi StatusLineNC     ctermbg=yellow ctermfg=236 guibg=yellow guifg=#303030
hi StatusLineTermNC ctermbg=yellow ctermfg=236 guibg=yellow guifg=#303030

set laststatus=2

set statusline=
set statusline+=\ %f
set statusline+=\ \[%n\]%r%m
set statusline+=%{exists('b:noStripWhitespace')?'':'[STW]'}
set statusline+=%=
set statusline+=%{gutentags#statusline('[',']')}
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %l/%L:%c
" The trailing space is important
set statusline+=\ 


" TODO : go through this and make it work when full Vim isn't installed, i.e. fresh install of Ubuntu

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
    finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Visible Bell
set vb

" set UTF-8 encoding
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8

set display=uhex,lastline
set shiftwidth=4 tabstop=4 expandtab
"set list  listchars=tab:»·,trail:·
set list  listchars=tab:>-,trail:-
set number

au FileType make setlocal noexpandtab
au FileType c set shiftwidth=4 tabstop=4 expandtab nowrap
au FileType cpp set shiftwidth=4 tabstop=4 expandtab nowrap
au FileType java set shiftwidth=4 tabstop=4 expandtab nowrap

" Don't create backups or swap files
set nobackup
set noswapfile

" Allow mouse
"set mouse=a

" Don't allow backspacing over everything in insert mode
"set backspace=
"indent,eol,start

set autoindent          " always set autoindenting on
set history=50          " keep 50 lines of command line history
set ruler               " show the cursor position all the time
set showcmd             " display incomplete commands
set incsearch           " do incremental searching
set ignorecase          " case insensitive search
set smartcase           " smartcase will do a case sensitive search if using caps
"if exists('&colorcolumn')
"    let &colorcolumn="80,".join(range(120,999),",")
"    highlight colorcolumn ctermbg=7
"endif

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" Trim blanks on exit
"      :%s/\s\+$//
:command Tb %s/\s\+$//

:set cpoptions+=$

" Make p in Visual mode replace the selected text with the "" register.
vnoremap p <Esc>:let current_reg = @"<CR>gvs<C-R>=current_reg<CR><Esc>

" Fix the messed up <BS> and <DEL>
"inoremap  
"set t_kb=
"set t_kD=

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

    " Enable file type detection.
    " Use the default filetype settings, so that mail gets 'tw' set to 72,
    " 'cindent' is on in C files, etc.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype plugin indent on

    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text setlocal textwidth=78

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

endif " has("autocmd")

if !exists("g:os")
    if has("win64") || has("win32") || has("win16")
        let g:os = "Windows"
    else
        let g:os = substitute(system('uname'), '\n', '', '')
    endif
endif

if has('clipboard')
    if g:os == "Darwin"
        set clipboard=unnamed
    elseif g:os == "Linux"
        if has('unnamedplus')
            set clipboard=unnamedplus
        else
            set clipboard=unnamed
        endif
    elseif g:os == "Windows"
        set clipboard=unnamed
    endif
endif

" statusline stuff
function! GitBranch()
    return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
    let l:branchname = GitBranch()
    return strlen(l:branchname) > 0?l:branchname:''
endfunction

set laststatus=2

set statusline=\ %f
set statusline+=\ \[%n\]%r%m
"set statusline+=\ \[%{StatuslineGit()}\]
set statusline+=%=
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
" The trailing space is important
set statusline+=\ 

"        -- VimPlug --
" Install vim-plug if it is not installed
if empty(glob('~/.vim/autoload/plug.vim'))
          silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
              \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
            autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins to be installed
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-easytags'
Plug 'brookhong/cscope.vim'
"Plug 'scrooloose/nerdcommenter'
"Plug 'SirVer/ultisnips'
"Plug 'jeetsukumaran/vim-buffergator'
Plug 'gilsondev/searchtasks.vim'
Plug 'majutsushi/tagbar'
"Plug 'simeji/winresizer'
"Plug 'vim-airline/vim-airline'
"Plug 'vim-airline/vim-airline-themes'
"Plug 'powerline/powerline'
"Plug 'tpope/vim-fugitive'
"Plug 'hashivim/vim-vagrant'
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"Plug 'junegunn/fzf.vim'
"Plug 'zivyangll/git-blame.vim'
"Plug 'davidhalter/jedi-vim'
"Plug 'kergoth/vim-bitbake'
"Plug 'gcmt/taboo.vim'
Plug 'airblade/vim-gitgutter'
"Plug 'jiangmiao/auto-pairs'
"Plug 'zxqfl/tabnine-vim'
"Plug 'prabirshrestha/async.vim'
"Plug 'prabirshrestha/vim-lsp'
"Plug 'pdavydov108/vim-lsp-cquery'
Plug 'christoomey/vim-tmux-navigator'

" Themes to be installed
Plug 'vim-scripts/dante.vim'
Plug 'gkjgh/cobalt'

call plug#end()

"
"########### Plugins Specific Stuffs #############
"
"     -- NerdTree --
"Toggle NERDtree to Ctrl+N
nmap <C-N> :NERDTreeToggle<CR>
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"     -- Cscope --
nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>
nnoremap <leader>l :call ToggleLocationList()<CR>

"      -- SearchTasks --
" Keywords for searchtask to look for
let g:searchtasks_list=["TODO", "FIXME", "XXX", "RCF"]

"       -- TagBar --
" Map the tagbar to F8
nmap <F8> :TagbarToggle<CR>

"       -- Vim Airline --
"let g:airline_powerline_fonts = 1

"        -- FZF --
" Use ctrl+f to open the file list
"nnoremap <C-f> :Files<Cr>

"Use ctrl+b to open list of buffers
"nnoremap <C-b> :Buffers<Cr>

"Use leader+h to open buffer history
"nmap <Leader>h :History<CR>

" Search through current buffer lines with leader+l and global bufferlines with
" leader+L
"nmap <Leader>l :BLines<CR>
"nmap <Leader>L :Lines<CR>

" Search through tags in current buffer, and search through tags in across the
" project
"nmap <Leader>t :BTags<CR>
"nmap <Leader>T :Tags<CR>

" Search Through Marks with leader+'
"nmap <Leader>' :Marks<CR>

" Easily grep within project using ctrl+g
"command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
"nnoremap <C-g> :Rg<CR>

"           -- Cquery --
if executable('cquery')
    au User lsp_setup call lsp#register_server({
          \ 'name': 'cquery',
          \ 'cmd': {server_info->['cquery']},
          \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
          \ 'initialization_options': { 'cacheDirectory': '/tmp/cquery/cache'  },
          \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
          \ })
endif

" Change the ugly default colorscheme to something more pleasing to the eye
"colo adam
"colo gothic
"colo seashell
"colo BlackSea
"colo cobalt
colo dante

